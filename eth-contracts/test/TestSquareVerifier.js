// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
var proof = {
    "proof": {
        "a": ["0x0160d2b3f85f2ca6e91065d8ba357d632358613218a612b80d5ac4887dd260e7", "0x17c050cc39ac395be25b153c0bd0b805bb765b3a9b4aad63f45007c04d608133"],
        "b": [["0x200d92f4e3eee1caf93b38fb3da3e195748d98bee3f43cd51af56aa436b44985", "0x28a8433d61b15e9f21610f4121b506f34ee0e23277d749a3ac64c7389bfdd14f"], ["0x00177673e0b08cdfb5246c96dcdf2bf34f41c73022115c58f741814ce1e29058", "0x1df1487a44712e7881ecafa844767ef33b02d15891b1ff566084bcc717b03e4b"]],
        "c": ["0x18891e505d3d6cb6af021aa83070ca7df400c888d9fab30051581b391c6a9e35", "0x0ffec9030d18f7a5cb5d7d5de57bdd49e3dbf7e53102b4ac3faf4b9433ca0961"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000001"]
}

contract('Verifier', accounts => {

    const account = accounts[0];

    const proof_a = proof["proof"]["a"];
    const proof_b = proof["proof"]["b"];
    const proof_c = proof["proof"]["c"];

    const correctProofInput = proof["inputs"];
    const incorrectProofInput = [1,2];

    describe('Testing Verifier', function () {
        before(async function () {
            this.contract = await Verifier.new({from: account});
        });

        it('Test verification with correct proof', async function () {
            let isVerified = await this.contract.verifyTx.call(proof_a,proof_b,proof_c,correctProofInput, {from: account});
            console.log(isVerified);
            assert.equal(isVerified, true, "Incorrect proof");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let isVerified = await this.contract.verifyTx.call(proof_a,proof_b,proof_c,incorrectProofInput, {from: account});
            assert.equal(isVerified, false, "Correct proof");
        });
    });

})
